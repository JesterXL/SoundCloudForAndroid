package{	import assets.Styles;	import assets.fonts.Fonts;	import assets.images.InputTextBackground;		import com.bit101.components.Style;	import com.jxl.soundcloud.Constants;	import com.jxl.soundcloud.components.DraggableText;	import com.jxl.soundcloud.components.InputText;	import com.jxl.soundcloud.components.PageableList;	import com.jxl.soundcloud.components.SongItemRenderer;	import com.jxl.soundcloud.rl.MainContext;	import com.jxl.soundcloud.views.MainView;	import com.jxl.soundcloud.vo.SongVO;		import flash.desktop.NativeApplication;	import flash.display.Graphics;	import flash.display.MovieClip;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeWindowType;	import flash.display.Screen;	import flash.display.Shape;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.KeyboardEvent;	import flash.events.UncaughtErrorEvent;	import flash.filesystem.File;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.system.Capabilities;	import flash.system.System;		import flex.lang.reflect.Field;		import net.hires.debug.Stats;		import org.robotlegs.mvcs.Context;
		public class SoundCloudAndroid extends Sprite	{				private var fonts:Fonts;		private var styles:Styles;		private var debug:Debug;		private var mainContext:MainContext;		private var debugShape:Shape;				public function SoundCloudAndroid()		{			super();			loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onUncaughtError);			this.addEventListener(Event.ADDED_TO_STAGE, onAdded);		}				private function onUncaughtError(event:UncaughtErrorEvent):void		{			Debug.logHeader();			Debug.log("SoundCloudAndroid::onUncaughtError");			Debug.log(event);			Debug.log("target: " + event.target);						Debug.error("Error::target: " + event.target + ", text: " + event.text + ", error: " + event.error);			try			{				throw new Error("nope");			}			catch(err:Error)			{				Debug.log(err.getStackTrace());				Debug.error("stack trace: " + err.getStackTrace());			}		}				private function onAdded(event:Event):void		{			try			{				stage.scaleMode = StageScaleMode.NO_SCALE;				stage.align = StageAlign.TOP_LEFT;				try				{					stage.nativeWindow.activate();				}				catch(err:Error){}								//Debug.log("Capabilities.version: " + Capabilities.version);				//Debug.log("stage.width: " + stage.width + ", stage.stageWidth: " + stage.stageWidth);				//Debug.log("stage.height: " + stage.height + ", stage.stageHeight: " + stage.stageHeight);				//Debug.log("DPI: " + Capabilities.screenDPI);								loadApp();				//testApp();                							}			catch(err:Error)			{				Debug.log("SoundCloudAndroid::onAdded, err: " + err);			}		}        private function showDebug():void        {            debug = new Debug();            var options:NativeWindowInitOptions = new NativeWindowInitOptions();            options.maximizable = false;            options.minimizable = false;            options.resizable = false;            options.type = NativeWindowType.UTILITY;            options.transparent = false;            options.systemChrome = NativeWindowSystemChrome.STANDARD;            var win:NativeWindow = new NativeWindow(options);            win.activate();            win.bounds = new Rectangle(0, 0, Constants.WIDTH, 300);            win.stage.addChild(debug);            win.stage.scaleMode = "noScale";            win.stage.align = "TL";			debug.setSize(win.bounds.width, win.bounds.height);            //Debug.log("SoundCloudAndroid::onAdded");        }        private function showDeviceDebug():void        {            debug = new Debug();            addChild(debug);            debug.y = 400;			debug.setSize(debug.width, Constants.HEIGHT - debug.y);			debug.y -= 100;			            //Debug.log("os: " + Capabilities.os);        }								private function loadApp():void		{			stage.frameRate = 31;						draw();						stage.addEventListener(Event.ACTIVATE, onActivate);			stage.addEventListener(Event.DEACTIVATE, onDeactivate);			//stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown, true);			//stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);			stage.stageFocusRect = false;			//stage.addEventListener(FocusEvent.FOCUS_IN, onFocus);			//stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, onKeyFocus, true);			//stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, onKeyFocus);			stage.addEventListener(Event.RESIZE, onResize);						mainContext = new MainContext(this);			addChild(new MainView());						//var dText:DraggableText = new DraggableText();			//addChild(dText);			//dText.text = new chunk();												//var stats:Stats = new Stats();			//addChild(stats);			//stats.y = Constants.HEIGHT - stats.height;			//stats.x = Constants.WIDTH - stats.width;			//var item:SongItemRenderer = new SongItemRenderer();			//addChild(item);			//item.large = true;									Debug.log("-- applicationDirectory --");			Debug.log(File.applicationDirectory.nativePath);						Debug.log("-- applicationStorageDirectory --");			Debug.log(File.applicationStorageDirectory.nativePath);						Debug.log("-- desktopDirectory --");			Debug.log(File.desktopDirectory.nativePath);						Debug.log("-- documentsDirectory --");			Debug.log(File.documentsDirectory.nativePath);						Debug.log("-- userDirectory --");			Debug.log(File.userDirectory.nativePath);						var dirs:Array = File.getRootDirectories();			var len:int = dirs.length;			for(var index:uint = 0; index < len; index++)			{				Debug.log(dirs[index].nativePath);			}									Debug.log("-- soundcloud --");			var file:File = File.userDirectory;			var path:String = file.nativePath + "/soundcloud";			file = File.userDirectory.resolvePath(path);			Debug.log(file.nativePath);						/*			if(CONFIG::DEBUGGING)			//if(false)			{				if(Capabilities.version.toLowerCase().indexOf("and") != -1)				{					showDeviceDebug();				}				else				{					showDebug();				}			}			*/				//showDeviceDebug();						try			{				stage.nativeWindow.bounds = new Rectangle(					(Screen.mainScreen.bounds.x + (Screen.mainScreen.bounds.width / 2) - (stage.stageWidth / 2)),					(Screen.mainScreen.bounds.y + (Screen.mainScreen.bounds.height / 2) - (stage.stageHeight / 2) - 250),					stage.stageWidth,					stage.stageHeight);			}			catch(err:Error){}		}				private function onActivate(event:Event):void		{			stage.frameRate = 31;		}				private function onDeactivate(event:Event):void		{			stage.frameRate = 4;		}				private function onFocus(event:FocusEvent):void		{			Debug.log("onFocus: " + event.target + ", relatedObject: " + event.relatedObject + ", phase: " + event.eventPhase);		}				private function onKeyFocus(event:FocusEvent):void		{			Debug.log("onKeyFocus: " + event.target + ", relatedObject: " + event.relatedObject + ", phase: " + event.eventPhase);		}				private function onKeyDown(event:KeyboardEvent):void		{			Debug.log("onKeyDown: " + event.target + ", key code: " + event.keyCode + ", phase: " + event.eventPhase);		}				private function onResize(event:Event):void		{			draw();		}				private function draw():void		{			graphics.clear();			graphics.beginFill(0xFFFFFF);			graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);			graphics.endFill();		}	}}